{"ast":null,"code":"// import React, { useState } from 'react';\n// import {\n//     Box,\n//     Button,\n//     InputLabel,\n//     MenuItem,\n//     FormControl,\n//     Select,\n//     TextField,\n//     Dialog,\n//     DialogTitle,\n//     DialogContent,\n//     DialogActions,\n//     List,\n//     ListItem,\n//     ListItemText,\n//     FormHelperText,\n// } from '@mui/material';\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\n// import { WovenImageList } from './ImageList';\n// import { useNavigate } from 'react-router-dom';\n\n// export default function SelectLabelsSingle() {\n//     const [roomType, setRoomType] = useState(\"\");\n//     const [checkInDate, setCheckInDate] = useState(null);\n//     const [checkOutDate, setCheckOutDate] = useState(null);\n//     const [guests, setGuests] = useState(\"\");\n//     const [error, setError] = useState(false);\n//     const [open, setOpen] = useState(false);\n//     const [bookings, setBookings] = useState([]);\n//     const [totalPrice, setTotalPrice] = useState(0);\n\n//     const navigate = useNavigate();\n\n//     const handleRoomChange = (event) => {\n//         setRoomType(event.target.value);\n//         setGuests('');\n//         setError(false);\n//     };\n\n//     const handleGuestsChange = (event) => {\n//         setGuests(event.target.value);\n//     };\n\n//     const handleCheckInDateChange = (newDate) => {\n//         setCheckInDate(newDate);\n//     };\n\n//     const handleCheckOutDateChange = (newDate) => {\n//         setCheckOutDate(newDate);\n//     };\n\n//     const calculateTotalPrice = () => {\n//         if (checkInDate && checkOutDate) {\n//             const checkIn = checkInDate.toDate();\n//             const checkOut = checkOutDate.toDate();\n//             const timeDifference = checkOut - checkIn;\n//             const daysBooked = timeDifference / (1000 * 3600 * 24);\n//             return daysBooked * 500;\n//         }\n//         return 0;\n//     };\n\n//     const handleSubmit = async () => {\n//         if (!roomType || !checkInDate || !checkOutDate || !guests) {\n//             setError(true);\n//             alert(\"Please complete all fields\");\n//             return;\n//         }\n\n//         if (checkOutDate.isBefore(checkInDate)) {\n//             setError(true);\n//             alert(\"Check-out date cannot be before check-in date\");\n//             return;\n//         }\n\n//         const totalPrice = calculateTotalPrice();\n//         setTotalPrice(totalPrice);\n\n//         alert(`Total Price: ${totalPrice} EGP`);\n\n//         const userId = localStorage.getItem(\"userId\");\n//         const requestBody = {\n//             roomType,\n//             guests,\n//             checkInDate: checkInDate.toISOString(),\n//             checkOutDate: checkOutDate.toISOString(),\n//             userId,\n//             totalPrice,\n//         };\n\n//         try {\n//             console.log(requestBody);\n//             const response = await fetch(\"http://localhost:5000/api/booking/details\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify(requestBody),\n//             });\n\n//             const data = await response.json();\n//             if (response.ok) {\n//                 alert(\"Booking details submitted successfully!\");\n//                 localStorage.setItem(\"bookingId\", data.bookingId);\n//                 navigate('/Bookservices');\n//             } else {\n//                 alert(data.message || \"Failed to submit booking details\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error.message);\n//             alert(error.message || \"Failed to submit booking details\");\n//         }\n//     };\n\n//     const handleShowBookings = async () => {\n//         const userId = localStorage.getItem(\"userId\");\n\n//         if (!userId) {\n//             alert(\"User not logged in\");\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\n//             const data = await response.json();\n\n//             if (response.ok) {\n//                 setBookings(data.bookings);\n//                 setOpen(true);\n//             } else {\n//                 alert(data.message || \"Failed to fetch bookings\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error.message);\n//             alert(error.message || \"Failed to fetch bookings\");\n//         }\n//     };\n\n//     return (\n//         <Box sx={{ width: '100%' }}>\n//             <FormControl fullWidth error={error}>\n//                 <InputLabel>Room Type</InputLabel>\n//                 <Select value={roomType} label=\"Room Type\" onChange={handleRoomChange}>\n//                     <MenuItem value=\"Deluxe Room\">Deluxe Room</MenuItem>\n//                     <MenuItem value=\"King Room\">King Room</MenuItem>\n//                 </Select>\n//                 {error && <FormHelperText>Room type is required</FormHelperText>}\n//             </FormControl>\n\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <DatePicker\n//                     label=\"Check-in Date\"\n//                     value={checkInDate}\n//                     onChange={handleCheckInDateChange}\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//                 />\n//             </LocalizationProvider>\n\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <DatePicker\n//                     label=\"Check-out Date\"\n//                     value={checkOutDate}\n//                     onChange={handleCheckOutDateChange}\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//                 />\n//             </LocalizationProvider>\n\n//             <FormControl sx={{ m: 1, minWidth: 400 }} error={error}>\n//                 <InputLabel id=\"guests-label\">Number of Guests</InputLabel>\n//                 <Select\n//                     labelId=\"guests-label\"\n//                     id=\"guests-select\"\n//                     value={guests}\n//                     label=\"Number of Guests\"\n//                     onChange={handleGuestsChange}\n//                 >\n//                     <MenuItem value=\"\">\n//                         <em>None</em>\n//                     </MenuItem>\n//                     <MenuItem value={1}>1 Guest</MenuItem>\n//                     <MenuItem value={2}>2 Guests</MenuItem>\n//                 </Select>\n//                 {error && <FormHelperText>Number of guests is required</FormHelperText>}\n//             </FormControl>\n\n//             <Button variant=\"contained\" fullWidth sx={{ marginTop: 3 }} onClick={handleSubmit}>\n//                 Submit\n//             </Button>\n\n//             <Button variant=\"outlined\" fullWidth sx={{ marginTop: 3 }} onClick={handleShowBookings}>\n//                 Show Bookings\n//             </Button>\n\n//             <Dialog open={open} onClose={() => setOpen(false)}>\n//                 <DialogTitle>Your Bookings</DialogTitle>\n//                 <DialogContent>\n//                     <List>\n//                         {bookings.map((booking, index) => (\n//                             <ListItem key={index}>\n//                                 <ListItemText\n//                                     primary={`Room Type: ${booking.roomType}`}\n//                                     secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate}, Total Price: ${booking.totalPrice}`}\n//                                 />\n//                             </ListItem>\n//                         ))}\n//                     </List>\n//                 </DialogContent>\n//                 <DialogActions>\n//                     <Button onClick={() => setOpen(false)} color=\"primary\">\n//                         Close\n//                     </Button>\n//                 </DialogActions>\n//             </Dialog>\n//         </Box>\n//     );\n// }\n// import React, { Component } from 'react';\n// import InputLabel from '@mui/material/InputLabel';\n// import MenuItem from '@mui/material/MenuItem';\n// import FormHelperText from '@mui/material/FormHelperText';\n// import FormControl from '@mui/material/FormControl';\n// import Select from '@mui/material/Select';\n// import Box from '@mui/material/Box';\n// import Button from '@mui/material/Button';\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\n// import { TextField, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, ListItemText } from \"@mui/material\";\n\n// class SelectLabelsSingle extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             roomType: '',\n//             checkInDate: null,\n//             checkOutDate: null,\n//             guests: '',\n//             error: false,\n//             open: false,\n//             bookings: [],\n//         };\n//     }\n\n//     handleRoomChange = (event) => {\n//         this.setState({\n//             roomType: event.target.value,\n//             guests: '',\n//             error: false,\n//         });\n//     };\n\n//     handleGuestsChange = (event) => {\n//         this.setState({ guests: event.target.value });\n//     };\n\n//     handleCheckInDateChange = (newDate) => {\n//         this.setState({ checkInDate: newDate });\n//     };\n\n//     handleCheckOutDateChange = (newDate) => {\n//         this.setState({ checkOutDate: newDate });\n//     };\n\n//     handleSubmit = async () => {\n//         const { roomType, checkInDate, checkOutDate, guests } = this.state;\n\n//         if (!roomType || !checkInDate || !checkOutDate || !guests) {\n//             this.setState({ error: true });\n//             alert(\"Please complete all fields\");\n//             return;\n//         }\n\n//         if (checkOutDate.isBefore(checkInDate)) {\n//             this.setState({ error: true });\n//             alert(\"Check-out date cannot be before check-in date\");\n//             return;\n//         }\n\n//         const userId = localStorage.getItem(\"userId\");\n//         const requestBody = {\n//             roomType,\n//             guests,\n//             checkInDate: checkInDate.toISOString(),\n//             checkOutDate: checkOutDate.toISOString(),\n//             userId,\n//         };\n\n//         try {\n//             const response = await fetch(\"http://localhost:5000/api/booking/details\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify(requestBody),\n//             });\n\n//             const data = await response.json();\n//             if (response.ok) {\n//                 alert(\"Booking details submitted successfully!\");\n//             } else {\n//                 alert(data.message || \"Failed to submit booking details\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error.message);\n//             alert(error.message || \"Failed to submit booking details\");\n//         }\n//     };\n\n//     handleShowBookings = async () => {\n//         const userId = localStorage.getItem(\"userId\");\n\n//         if (!userId) {\n//             alert(\"User not logged in\");\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\n//             const data = await response.json();\n\n//             if (response.ok) {\n//                 this.setState({ bookings: data.bookings, open: true });\n//             } else {\n//                 alert(data.message || \"Failed to fetch bookings\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error.message);\n//             alert(error.message || \"Failed to fetch bookings\");\n//         }\n//     };\n\n//     render() {\n//         const { roomType, checkInDate, checkOutDate, guests, error, open, bookings } = this.state;\n\n//         return (\n//             <Box sx={{ maxWidth: 500, margin: \"0 auto\", paddingTop: 3 }}>\n//                 <FormControl fullWidth error={error}>\n//                     <InputLabel>Room Type</InputLabel>\n//                     <Select value={roomType} label=\"Room Type\" onChange={this.handleRoomChange}>\n//                         <MenuItem value=\"Deluxe Room\">Deluxe Room</MenuItem>\n//                         <MenuItem value=\"King Room\">King Room</MenuItem>\n//                     </Select>\n//                     {error && <FormHelperText>Room type is required</FormHelperText>}\n//                 </FormControl>\n\n//                 <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                     <DatePicker\n//                         label=\"Check-in Date\"\n//                         value={checkInDate}\n//                         onChange={this.handleCheckInDateChange}\n//                         renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//                     />\n//                 </LocalizationProvider>\n\n//                 <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                     <DatePicker\n//                         label=\"Check-out Date\"\n//                         value={checkOutDate}\n//                         onChange={this.handleCheckOutDateChange}\n//                         renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//                     />\n//                 </LocalizationProvider>\n\n//                 <FormControl sx={{ m: 1, minWidth: 400 }} error={error}>\n//                     <InputLabel id=\"guests-label\">Number of Guests</InputLabel>\n//                     <Select\n//                         labelId=\"guests-label\"\n//                         id=\"guests-select\"\n//                         value={guests}\n//                         label=\"Number of Guests\"\n//                         onChange={this.handleGuestsChange}\n//                     >\n//                         <MenuItem value=\"\">\n//                             <em>None</em>\n//                         </MenuItem>\n//                         <MenuItem value={1}>1 Guest</MenuItem>\n//                         <MenuItem value={2}>2 Guests</MenuItem>\n//                     </Select>\n//                     {error && <FormHelperText>Number of guests is required</FormHelperText>}\n//                 </FormControl>\n\n//                 <Button variant=\"contained\" fullWidth sx={{ marginTop: 3 }} onClick={this.handleSubmit}>\n//                     Submit\n//                 </Button>\n\n//                 <Button variant=\"outlined\" fullWidth sx={{ marginTop: 3 }} onClick={this.handleShowBookings}>\n//                     Show Bookings\n//                 </Button>\n\n//                 <Dialog open={open} onClose={() => this.setState({ open: false })}>\n//                     <DialogTitle>Your Bookings</DialogTitle>\n//                     <DialogContent>\n//                         <List>\n//                             {bookings.map((booking, index) => (\n//                                 <ListItem key={index}>\n//                                     <ListItemText\n//                                         primary={`Room Type: ${booking.roomType}`}\n//                                         secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate}`}\n//                                     />\n//                                 </ListItem>\n//                             ))}\n//                         </List>\n//                     </DialogContent>\n//                     <DialogActions>\n//                         <Button onClick={() => this.setState({ open: false })} color=\"primary\">\n//                             Close\n//                         </Button>\n//                     </DialogActions>\n//                 </Dialog>\n//             </Box>\n//         );\n//     }\n// }\n\n// export default SelectLabelsSingle;","map":{"version":3,"names":[],"sources":["C:/Users/farid/hotel/my-app/Ejust-Hotel-Website/src/components/selectBox.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import {\r\n//     Box,\r\n//     Button,\r\n//     InputLabel,\r\n//     MenuItem,\r\n//     FormControl,\r\n//     Select,\r\n//     TextField,\r\n//     Dialog,\r\n//     DialogTitle,\r\n//     DialogContent,\r\n//     DialogActions,\r\n//     List,\r\n//     ListItem,\r\n//     ListItemText,\r\n//     FormHelperText,\r\n// } from '@mui/material';\r\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\n// import { WovenImageList } from './ImageList';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// export default function SelectLabelsSingle() {\r\n//     const [roomType, setRoomType] = useState(\"\");\r\n//     const [checkInDate, setCheckInDate] = useState(null);\r\n//     const [checkOutDate, setCheckOutDate] = useState(null);\r\n//     const [guests, setGuests] = useState(\"\");\r\n//     const [error, setError] = useState(false);\r\n//     const [open, setOpen] = useState(false);\r\n//     const [bookings, setBookings] = useState([]);\r\n//     const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleRoomChange = (event) => {\r\n//         setRoomType(event.target.value);\r\n//         setGuests('');\r\n//         setError(false);\r\n//     };\r\n\r\n//     const handleGuestsChange = (event) => {\r\n//         setGuests(event.target.value);\r\n//     };\r\n\r\n//     const handleCheckInDateChange = (newDate) => {\r\n//         setCheckInDate(newDate);\r\n//     };\r\n\r\n//     const handleCheckOutDateChange = (newDate) => {\r\n//         setCheckOutDate(newDate);\r\n//     };\r\n\r\n//     const calculateTotalPrice = () => {\r\n//         if (checkInDate && checkOutDate) {\r\n//             const checkIn = checkInDate.toDate();\r\n//             const checkOut = checkOutDate.toDate();\r\n//             const timeDifference = checkOut - checkIn;\r\n//             const daysBooked = timeDifference / (1000 * 3600 * 24);\r\n//             return daysBooked * 500;\r\n//         }\r\n//         return 0;\r\n//     };\r\n\r\n//     const handleSubmit = async () => {\r\n//         if (!roomType || !checkInDate || !checkOutDate || !guests) {\r\n//             setError(true);\r\n//             alert(\"Please complete all fields\");\r\n//             return;\r\n//         }\r\n\r\n//         if (checkOutDate.isBefore(checkInDate)) {\r\n//             setError(true);\r\n//             alert(\"Check-out date cannot be before check-in date\");\r\n//             return;\r\n//         }\r\n\r\n//         const totalPrice = calculateTotalPrice();\r\n//         setTotalPrice(totalPrice);\r\n\r\n//         alert(`Total Price: ${totalPrice} EGP`);\r\n\r\n//         const userId = localStorage.getItem(\"userId\");\r\n//         const requestBody = {\r\n//             roomType,\r\n//             guests,\r\n//             checkInDate: checkInDate.toISOString(),\r\n//             checkOutDate: checkOutDate.toISOString(),\r\n//             userId,\r\n//             totalPrice,\r\n//         };\r\n\r\n//         try {\r\n//             console.log(requestBody);\r\n//             const response = await fetch(\"http://localhost:5000/api/booking/details\", {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify(requestBody),\r\n//             });\r\n\r\n//             const data = await response.json();\r\n//             if (response.ok) {\r\n//                 alert(\"Booking details submitted successfully!\");\r\n//                 localStorage.setItem(\"bookingId\", data.bookingId);\r\n//                 navigate('/Bookservices');\r\n//             } else {\r\n//                 alert(data.message || \"Failed to submit booking details\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error.message);\r\n//             alert(error.message || \"Failed to submit booking details\");\r\n//         }\r\n//     };\r\n\r\n//     const handleShowBookings = async () => {\r\n//         const userId = localStorage.getItem(\"userId\");\r\n\r\n//         if (!userId) {\r\n//             alert(\"User not logged in\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\r\n//             const data = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 setBookings(data.bookings);\r\n//                 setOpen(true);\r\n//             } else {\r\n//                 alert(data.message || \"Failed to fetch bookings\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error.message);\r\n//             alert(error.message || \"Failed to fetch bookings\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Box sx={{ width: '100%' }}>\r\n//             <FormControl fullWidth error={error}>\r\n//                 <InputLabel>Room Type</InputLabel>\r\n//                 <Select value={roomType} label=\"Room Type\" onChange={handleRoomChange}>\r\n//                     <MenuItem value=\"Deluxe Room\">Deluxe Room</MenuItem>\r\n//                     <MenuItem value=\"King Room\">King Room</MenuItem>\r\n//                 </Select>\r\n//                 {error && <FormHelperText>Room type is required</FormHelperText>}\r\n//             </FormControl>\r\n\r\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//                 <DatePicker\r\n//                     label=\"Check-in Date\"\r\n//                     value={checkInDate}\r\n//                     onChange={handleCheckInDateChange}\r\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//                 />\r\n//             </LocalizationProvider>\r\n\r\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//                 <DatePicker\r\n//                     label=\"Check-out Date\"\r\n//                     value={checkOutDate}\r\n//                     onChange={handleCheckOutDateChange}\r\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//                 />\r\n//             </LocalizationProvider>\r\n\r\n//             <FormControl sx={{ m: 1, minWidth: 400 }} error={error}>\r\n//                 <InputLabel id=\"guests-label\">Number of Guests</InputLabel>\r\n//                 <Select\r\n//                     labelId=\"guests-label\"\r\n//                     id=\"guests-select\"\r\n//                     value={guests}\r\n//                     label=\"Number of Guests\"\r\n//                     onChange={handleGuestsChange}\r\n//                 >\r\n//                     <MenuItem value=\"\">\r\n//                         <em>None</em>\r\n//                     </MenuItem>\r\n//                     <MenuItem value={1}>1 Guest</MenuItem>\r\n//                     <MenuItem value={2}>2 Guests</MenuItem>\r\n//                 </Select>\r\n//                 {error && <FormHelperText>Number of guests is required</FormHelperText>}\r\n//             </FormControl>\r\n\r\n//             <Button variant=\"contained\" fullWidth sx={{ marginTop: 3 }} onClick={handleSubmit}>\r\n//                 Submit\r\n//             </Button>\r\n\r\n//             <Button variant=\"outlined\" fullWidth sx={{ marginTop: 3 }} onClick={handleShowBookings}>\r\n//                 Show Bookings\r\n//             </Button>\r\n\r\n//             <Dialog open={open} onClose={() => setOpen(false)}>\r\n//                 <DialogTitle>Your Bookings</DialogTitle>\r\n//                 <DialogContent>\r\n//                     <List>\r\n//                         {bookings.map((booking, index) => (\r\n//                             <ListItem key={index}>\r\n//                                 <ListItemText\r\n//                                     primary={`Room Type: ${booking.roomType}`}\r\n//                                     secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate}, Total Price: ${booking.totalPrice}`}\r\n//                                 />\r\n//                             </ListItem>\r\n//                         ))}\r\n//                     </List>\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={() => setOpen(false)} color=\"primary\">\r\n//                         Close\r\n//                     </Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//         </Box>\r\n//     );\r\n// }\r\n// import React, { Component } from 'react';\r\n// import InputLabel from '@mui/material/InputLabel';\r\n// import MenuItem from '@mui/material/MenuItem';\r\n// import FormHelperText from '@mui/material/FormHelperText';\r\n// import FormControl from '@mui/material/FormControl';\r\n// import Select from '@mui/material/Select';\r\n// import Box from '@mui/material/Box';\r\n// import Button from '@mui/material/Button';\r\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\n// import { TextField, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, ListItemText } from \"@mui/material\";\r\n\r\n// class SelectLabelsSingle extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             roomType: '',\r\n//             checkInDate: null,\r\n//             checkOutDate: null,\r\n//             guests: '',\r\n//             error: false,\r\n//             open: false,\r\n//             bookings: [],\r\n//         };\r\n//     }\r\n\r\n//     handleRoomChange = (event) => {\r\n//         this.setState({\r\n//             roomType: event.target.value,\r\n//             guests: '',\r\n//             error: false,\r\n//         });\r\n//     };\r\n\r\n//     handleGuestsChange = (event) => {\r\n//         this.setState({ guests: event.target.value });\r\n//     };\r\n\r\n//     handleCheckInDateChange = (newDate) => {\r\n//         this.setState({ checkInDate: newDate });\r\n//     };\r\n\r\n//     handleCheckOutDateChange = (newDate) => {\r\n//         this.setState({ checkOutDate: newDate });\r\n//     };\r\n\r\n//     handleSubmit = async () => {\r\n//         const { roomType, checkInDate, checkOutDate, guests } = this.state;\r\n\r\n//         if (!roomType || !checkInDate || !checkOutDate || !guests) {\r\n//             this.setState({ error: true });\r\n//             alert(\"Please complete all fields\");\r\n//             return;\r\n//         }\r\n\r\n//         if (checkOutDate.isBefore(checkInDate)) {\r\n//             this.setState({ error: true });\r\n//             alert(\"Check-out date cannot be before check-in date\");\r\n//             return;\r\n//         }\r\n\r\n//         const userId = localStorage.getItem(\"userId\");\r\n//         const requestBody = {\r\n//             roomType,\r\n//             guests,\r\n//             checkInDate: checkInDate.toISOString(),\r\n//             checkOutDate: checkOutDate.toISOString(),\r\n//             userId,\r\n//         };\r\n\r\n//         try {\r\n//             const response = await fetch(\"http://localhost:5000/api/booking/details\", {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify(requestBody),\r\n//             });\r\n\r\n//             const data = await response.json();\r\n//             if (response.ok) {\r\n//                 alert(\"Booking details submitted successfully!\");\r\n//             } else {\r\n//                 alert(data.message || \"Failed to submit booking details\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error.message);\r\n//             alert(error.message || \"Failed to submit booking details\");\r\n//         }\r\n//     };\r\n\r\n//     handleShowBookings = async () => {\r\n//         const userId = localStorage.getItem(\"userId\");\r\n\r\n//         if (!userId) {\r\n//             alert(\"User not logged in\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\r\n//             const data = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 this.setState({ bookings: data.bookings, open: true });\r\n//             } else {\r\n//                 alert(data.message || \"Failed to fetch bookings\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error.message);\r\n//             alert(error.message || \"Failed to fetch bookings\");\r\n//         }\r\n//     };\r\n\r\n//     render() {\r\n//         const { roomType, checkInDate, checkOutDate, guests, error, open, bookings } = this.state;\r\n\r\n//         return (\r\n//             <Box sx={{ maxWidth: 500, margin: \"0 auto\", paddingTop: 3 }}>\r\n//                 <FormControl fullWidth error={error}>\r\n//                     <InputLabel>Room Type</InputLabel>\r\n//                     <Select value={roomType} label=\"Room Type\" onChange={this.handleRoomChange}>\r\n//                         <MenuItem value=\"Deluxe Room\">Deluxe Room</MenuItem>\r\n//                         <MenuItem value=\"King Room\">King Room</MenuItem>\r\n//                     </Select>\r\n//                     {error && <FormHelperText>Room type is required</FormHelperText>}\r\n//                 </FormControl>\r\n\r\n//                 <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//                     <DatePicker\r\n//                         label=\"Check-in Date\"\r\n//                         value={checkInDate}\r\n//                         onChange={this.handleCheckInDateChange}\r\n//                         renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//                     />\r\n//                 </LocalizationProvider>\r\n\r\n//                 <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//                     <DatePicker\r\n//                         label=\"Check-out Date\"\r\n//                         value={checkOutDate}\r\n//                         onChange={this.handleCheckOutDateChange}\r\n//                         renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//                     />\r\n//                 </LocalizationProvider>\r\n\r\n//                 <FormControl sx={{ m: 1, minWidth: 400 }} error={error}>\r\n//                     <InputLabel id=\"guests-label\">Number of Guests</InputLabel>\r\n//                     <Select\r\n//                         labelId=\"guests-label\"\r\n//                         id=\"guests-select\"\r\n//                         value={guests}\r\n//                         label=\"Number of Guests\"\r\n//                         onChange={this.handleGuestsChange}\r\n//                     >\r\n//                         <MenuItem value=\"\">\r\n//                             <em>None</em>\r\n//                         </MenuItem>\r\n//                         <MenuItem value={1}>1 Guest</MenuItem>\r\n//                         <MenuItem value={2}>2 Guests</MenuItem>\r\n//                     </Select>\r\n//                     {error && <FormHelperText>Number of guests is required</FormHelperText>}\r\n//                 </FormControl>\r\n\r\n//                 <Button variant=\"contained\" fullWidth sx={{ marginTop: 3 }} onClick={this.handleSubmit}>\r\n//                     Submit\r\n//                 </Button>\r\n\r\n//                 <Button variant=\"outlined\" fullWidth sx={{ marginTop: 3 }} onClick={this.handleShowBookings}>\r\n//                     Show Bookings\r\n//                 </Button>\r\n\r\n//                 <Dialog open={open} onClose={() => this.setState({ open: false })}>\r\n//                     <DialogTitle>Your Bookings</DialogTitle>\r\n//                     <DialogContent>\r\n//                         <List>\r\n//                             {bookings.map((booking, index) => (\r\n//                                 <ListItem key={index}>\r\n//                                     <ListItemText\r\n//                                         primary={`Room Type: ${booking.roomType}`}\r\n//                                         secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate}`}\r\n//                                     />\r\n//                                 </ListItem>\r\n//                             ))}\r\n//                         </List>\r\n//                     </DialogContent>\r\n//                     <DialogActions>\r\n//                         <Button onClick={() => this.setState({ open: false })} color=\"primary\">\r\n//                             Close\r\n//                         </Button>\r\n//                     </DialogActions>\r\n//                 </Dialog>\r\n//             </Box>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default SelectLabelsSingle;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}