{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\farid\\\\hotel\\\\my-app\\\\Ejust-Hotel-Website\\\\src\\\\passwordResetPage.js\",\n  _s = $RefreshSig$();\n// src/pages/PasswordReset.js\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Box, TextField, Button, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordReset = () => {\n  _s();\n  const {\n    token\n  } = useParams(); // Token from the URL\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (newPassword !== confirmPassword) {\n      setMessage(\"Passwords do not match\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:5000/api/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token,\n          newPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(\"Password reset successful! Redirecting...\");\n        // Redirect to login or home page after success\n      } else {\n        setMessage(data.message || \"Error resetting password\");\n      }\n    } catch (error) {\n      setMessage(\"Error resetting password\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: \"Reset Your Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"New Password\",\n        type: \"password\",\n        fullWidth: true,\n        required: true,\n        value: newPassword,\n        onChange: e => setNewPassword(e.target.value),\n        sx: {\n          marginBottom: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Confirm Password\",\n        type: \"password\",\n        fullWidth: true,\n        required: true,\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        sx: {\n          marginBottom: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: loading,\n        children: loading ? \"Resetting...\" : \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(Typography, {\n      sx: {\n        marginTop: 2\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordReset, \"R1kCoR52MzhwvE2aqw5EnyyTNpE=\", false, function () {\n  return [useParams];\n});\n_c = PasswordReset;\nexport default PasswordReset;\nvar _c;\n$RefreshReg$(_c, \"PasswordReset\");","map":{"version":3,"names":["React","useState","useParams","Box","TextField","Button","Typography","jsxDEV","_jsxDEV","PasswordReset","_s","token","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","loading","setLoading","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","error","sx","padding","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","label","type","fullWidth","required","value","onChange","e","target","marginBottom","color","disabled","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/farid/hotel/my-app/Ejust-Hotel-Website/src/passwordResetPage.js"],"sourcesContent":["// src/pages/PasswordReset.js\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Box, TextField, Button, Typography } from \"@mui/material\";\r\n\r\nconst PasswordReset = () => {\r\n  const { token } = useParams();  // Token from the URL\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      setMessage(\"Passwords do not match\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/reset-password\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ token, newPassword }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMessage(\"Password reset successful! Redirecting...\");\r\n        // Redirect to login or home page after success\r\n      } else {\r\n        setMessage(data.message || \"Error resetting password\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error resetting password\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ padding: 2 }}>\r\n      <Typography variant=\"h5\">Reset Your Password</Typography>\r\n      <form onSubmit={handleSubmit}>\r\n        <TextField\r\n          label=\"New Password\"\r\n          type=\"password\"\r\n          fullWidth\r\n          required\r\n          value={newPassword}\r\n          onChange={(e) => setNewPassword(e.target.value)}\r\n          sx={{ marginBottom: 2 }}\r\n        />\r\n        <TextField\r\n          label=\"Confirm Password\"\r\n          type=\"password\"\r\n          fullWidth\r\n          required\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          sx={{ marginBottom: 2 }}\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" disabled={loading}>\r\n          {loading ? \"Resetting...\" : \"Reset Password\"}\r\n        </Button>\r\n      </form>\r\n      {message && <Typography sx={{ marginTop: 2 }}>{message}</Typography>}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PasswordReset;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}