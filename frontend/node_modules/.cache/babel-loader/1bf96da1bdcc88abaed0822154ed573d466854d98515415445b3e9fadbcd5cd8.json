{"ast":null,"code":"// import React, { useState } from \"react\";\n// import InputLabel from \"@mui/material/InputLabel\";\n// import MenuItem from \"@mui/material/MenuItem\";\n// import FormHelperText from \"@mui/material/FormHelperText\";\n// import FormControl from \"@mui/material/FormControl\";\n// import Select from \"@mui/material/Select\";\n// import Box from \"@mui/material/Box\";\n// import Button from \"@mui/material/Button\";\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\n// import { TextField, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, ListItemText } from \"@mui/material\";\n// import { WovenImageListDouble } from './ImageListDoubleRoom';\n// import { useNavigate } from 'react-router-dom';\n// export function SelectLabelsDouble() {\n//   const [roomType, setRoomType] = useState(\"\");\n//   const [checkInDate, setCheckInDate] = useState(null);\n//   const [checkOutDate, setCheckOutDate] = useState(null);\n//   const [guests] = useState(2);\n//   const [error, setError] = useState(false);\n//   const [totalPrice, setTotalPrice] = useState(0);\n\n//   // State for the modal\n//   const [open, setOpen] = useState(false);\n//   const [bookings, setBookings] = useState([]);\n//   const navigate = useNavigate();\n//   const handleRoomChange = (event) => {\n//     setRoomType(event.target.value);\n//     setError(false);\n//   };\n\n//   const handleCheckInDateChange = (newDate) => {\n//     setCheckInDate(newDate);\n//   };\n\n//   const handleCheckOutDateChange = (newDate) => {\n//     setCheckOutDate(newDate);\n//   };\n//   const calculateTotalPrice = () => {\n//     if (checkInDate && checkOutDate) {\n//         const checkIn = checkInDate.toDate();\n//         const checkOut = checkOutDate.toDate();\n//         const timeDifference = checkOut - checkIn;\n//         const daysBooked = timeDifference / (1000 * 3600 * 24);\n//         return daysBooked * 500;\n//     }\n//     return 0;\n//   };\n\n//   const handleSubmit = async () => {\n//     if (!roomType || !checkInDate || !checkOutDate) {\n//       setError(true);\n//       alert(\"Please complete all fields\");\n//       return;\n//     }\n//     const totalPrice = calculateTotalPrice();\n//     setTotalPrice(totalPrice);\n\n//     alert(`Total Price: ${totalPrice} EGP`);\n\n//     const userId = localStorage.getItem(\"userId\");\n\n//     const requestBody = {\n//       roomType,\n//       checkInDate: checkInDate.toISOString(),\n//       checkOutDate: checkOutDate.toISOString(),\n//       guests,\n//       userId,\n//       totalPrice,\n//     };\n\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/booking/details\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(requestBody),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         alert(\"Booking details submitted successfully!\");\n//         localStorage.setItem(\"bookingId\", data.bookingId);\n//         console.log(data.bookingId);\n//         navigate('/Bookservices');\n//       } else {\n//         alert(data.message || \"Failed to submit booking details\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error:\", error.message);\n//       alert(error.message || \"Failed to submit booking details\");\n//     }\n//   };\n\n//   const handleShowBookings = async () => {\n//     const userId = localStorage.getItem(\"userId\");\n\n//     if (!userId) {\n//       alert(\"User not logged in\");\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         setBookings(data.bookings);\n//         setOpen(true);\n//       } else {\n//         alert(data.message || \"Failed to fetch bookings\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error:\", error.message);\n//       alert(error.message || \"Failed to fetch bookings\");\n//     }\n//   };\n\n//   return (\n//     <Box sx={{ maxWidth: 500, margin: \"0 auto\", paddingTop: 3 }}>\n//       <FormControl fullWidth error={error}>\n//         <InputLabel>Room Type</InputLabel>\n//         <Select value={roomType} label=\"Room Type\" onChange={handleRoomChange}>\n//           <MenuItem value=\"Deluxe Double Room\">Deluxe Double Room</MenuItem>\n//         </Select>\n//         {error && <FormHelperText>Room type is required</FormHelperText>}\n//       </FormControl>\n\n//       <LocalizationProvider dateAdapter={AdapterDayjs}>\n//         <DatePicker\n//           label=\"Check-in Date\"\n//           value={checkInDate}\n//           onChange={handleCheckInDateChange}\n//           renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//         />\n//       </LocalizationProvider>\n\n//       <LocalizationProvider dateAdapter={AdapterDayjs}>\n//         <DatePicker\n//           label=\"Check-out Date\"\n//           value={checkOutDate}\n//           onChange={handleCheckOutDateChange}\n//           renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//         />\n//       </LocalizationProvider>\n\n//       <Button\n//         variant=\"contained\"\n//         fullWidth\n//         sx={{ marginTop: 3 }}\n//         onClick={handleSubmit}\n//       >\n//         Submit\n//       </Button>\n\n//       <Button\n//         variant=\"outlined\"\n//         fullWidth\n//         sx={{ marginTop: 3 }}\n//         onClick={handleShowBookings}\n//       >\n//         Show Bookings\n//       </Button>\n\n//       {/* Show images under the button */}\n\n//       <Dialog open={open} onClose={() => setOpen(false)}>\n//         <DialogTitle>Your Bookings</DialogTitle>\n//         <DialogContent>\n//           <List>\n//             {bookings.map((booking, index) => (\n//               <ListItem key={index}>\n//                 <ListItemText\n//                   primary={`Room Type: ${booking.roomType}`}\n//                   secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate},Total Price: ${booking.totalPrice} `}\n//                 />\n//               </ListItem>\n//             ))}\n//           </List>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={() => setOpen(false)} color=\"primary\">\n//             Close\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </Box>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/farid/hotel/my-app/Ejust-Hotel-Website/src/components/selectBoxDoubleRoom.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import InputLabel from \"@mui/material/InputLabel\";\r\n// import MenuItem from \"@mui/material/MenuItem\";\r\n// import FormHelperText from \"@mui/material/FormHelperText\";\r\n// import FormControl from \"@mui/material/FormControl\";\r\n// import Select from \"@mui/material/Select\";\r\n// import Box from \"@mui/material/Box\";\r\n// import Button from \"@mui/material/Button\";\r\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\n// import { TextField, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, ListItemText } from \"@mui/material\";\r\n// import { WovenImageListDouble } from './ImageListDoubleRoom';\r\n// import { useNavigate } from 'react-router-dom';\r\n// export function SelectLabelsDouble() {\r\n//   const [roomType, setRoomType] = useState(\"\");\r\n//   const [checkInDate, setCheckInDate] = useState(null);\r\n//   const [checkOutDate, setCheckOutDate] = useState(null);\r\n//   const [guests] = useState(2);\r\n//   const [error, setError] = useState(false);\r\n//   const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n//   // State for the modal\r\n//   const [open, setOpen] = useState(false);\r\n//   const [bookings, setBookings] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const handleRoomChange = (event) => {\r\n//     setRoomType(event.target.value);\r\n//     setError(false);\r\n//   };\r\n\r\n//   const handleCheckInDateChange = (newDate) => {\r\n//     setCheckInDate(newDate);\r\n//   };\r\n\r\n//   const handleCheckOutDateChange = (newDate) => {\r\n//     setCheckOutDate(newDate);\r\n//   };\r\n//   const calculateTotalPrice = () => {\r\n//     if (checkInDate && checkOutDate) {\r\n//         const checkIn = checkInDate.toDate();\r\n//         const checkOut = checkOutDate.toDate();\r\n//         const timeDifference = checkOut - checkIn;\r\n//         const daysBooked = timeDifference / (1000 * 3600 * 24);\r\n//         return daysBooked * 500;\r\n//     }\r\n//     return 0;\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!roomType || !checkInDate || !checkOutDate) {\r\n//       setError(true);\r\n//       alert(\"Please complete all fields\");\r\n//       return;\r\n//     }\r\n//     const totalPrice = calculateTotalPrice();\r\n//     setTotalPrice(totalPrice);\r\n\r\n//     alert(`Total Price: ${totalPrice} EGP`);\r\n\r\n//     const userId = localStorage.getItem(\"userId\");\r\n\r\n//     const requestBody = {\r\n//       roomType,\r\n//       checkInDate: checkInDate.toISOString(),\r\n//       checkOutDate: checkOutDate.toISOString(),\r\n//       guests,\r\n//       userId,\r\n//       totalPrice,\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/api/booking/details\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(requestBody),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       if (response.ok) {\r\n//         alert(\"Booking details submitted successfully!\");\r\n//         localStorage.setItem(\"bookingId\", data.bookingId);\r\n//         console.log(data.bookingId);\r\n//         navigate('/Bookservices');\r\n//       } else {\r\n//         alert(data.message || \"Failed to submit booking details\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error.message);\r\n//       alert(error.message || \"Failed to submit booking details\");\r\n//     }\r\n//   };\r\n\r\n//   const handleShowBookings = async () => {\r\n//     const userId = localStorage.getItem(\"userId\");\r\n\r\n//     if (!userId) {\r\n//       alert(\"User not logged in\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\r\n//       const data = await response.json();\r\n\r\n//       if (response.ok) {\r\n//         setBookings(data.bookings);\r\n//         setOpen(true);\r\n//       } else {\r\n//         alert(data.message || \"Failed to fetch bookings\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error.message);\r\n//       alert(error.message || \"Failed to fetch bookings\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Box sx={{ maxWidth: 500, margin: \"0 auto\", paddingTop: 3 }}>\r\n//       <FormControl fullWidth error={error}>\r\n//         <InputLabel>Room Type</InputLabel>\r\n//         <Select value={roomType} label=\"Room Type\" onChange={handleRoomChange}>\r\n//           <MenuItem value=\"Deluxe Double Room\">Deluxe Double Room</MenuItem>\r\n//         </Select>\r\n//         {error && <FormHelperText>Room type is required</FormHelperText>}\r\n//       </FormControl>\r\n\r\n//       <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//         <DatePicker\r\n//           label=\"Check-in Date\"\r\n//           value={checkInDate}\r\n//           onChange={handleCheckInDateChange}\r\n//           renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//         />\r\n//       </LocalizationProvider>\r\n\r\n//       <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//         <DatePicker\r\n//           label=\"Check-out Date\"\r\n//           value={checkOutDate}\r\n//           onChange={handleCheckOutDateChange}\r\n//           renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//         />\r\n//       </LocalizationProvider>\r\n\r\n//       <Button\r\n//         variant=\"contained\"\r\n//         fullWidth\r\n//         sx={{ marginTop: 3 }}\r\n//         onClick={handleSubmit}\r\n//       >\r\n//         Submit\r\n//       </Button>\r\n\r\n//       <Button\r\n//         variant=\"outlined\"\r\n//         fullWidth\r\n//         sx={{ marginTop: 3 }}\r\n//         onClick={handleShowBookings}\r\n//       >\r\n//         Show Bookings\r\n//       </Button>\r\n\r\n//       {/* Show images under the button */}\r\n      \r\n\r\n//       <Dialog open={open} onClose={() => setOpen(false)}>\r\n//         <DialogTitle>Your Bookings</DialogTitle>\r\n//         <DialogContent>\r\n//           <List>\r\n//             {bookings.map((booking, index) => (\r\n//               <ListItem key={index}>\r\n//                 <ListItemText\r\n//                   primary={`Room Type: ${booking.roomType}`}\r\n//                   secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate},Total Price: ${booking.totalPrice} `}\r\n//                 />\r\n//               </ListItem>\r\n//             ))}\r\n//           </List>\r\n//         </DialogContent>\r\n//         <DialogActions>\r\n//           <Button onClick={() => setOpen(false)} color=\"primary\">\r\n//             Close\r\n//           </Button>\r\n//         </DialogActions>\r\n//       </Dialog>\r\n//     </Box>\r\n//   );\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}