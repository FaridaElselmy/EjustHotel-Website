{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\farid\\\\hotel\\\\my-app\\\\Ejust-Hotel-Website\\\\src\\\\components\\\\selectBox.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState } from 'react';\n// import {\n//     Box,\n//     Button,\n//     InputLabel,\n//     MenuItem,\n//     FormControl,\n//     Select,\n//     TextField,\n//     Dialog,\n//     DialogTitle,\n//     DialogContent,\n//     DialogActions,\n//     List,\n//     ListItem,\n//     ListItemText,\n//     FormHelperText,\n// } from '@mui/material';\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\n// import { WovenImageList } from './ImageList';\n// import { useNavigate } from 'react-router-dom';\n\n// export default function SelectLabelsSingle() {\n//     const [roomType, setRoomType] = useState(\"\");\n//     const [checkInDate, setCheckInDate] = useState(null);\n//     const [checkOutDate, setCheckOutDate] = useState(null);\n//     const [guests, setGuests] = useState(\"\");\n//     const [error, setError] = useState(false);\n//     const [open, setOpen] = useState(false);\n//     const [bookings, setBookings] = useState([]);\n//     const [totalPrice, setTotalPrice] = useState(0);\n\n//     const navigate = useNavigate();\n\n//     const handleRoomChange = (event) => {\n//         setRoomType(event.target.value);\n//         setGuests('');\n//         setError(false);\n//     };\n\n//     const handleGuestsChange = (event) => {\n//         setGuests(event.target.value);\n//     };\n\n//     const handleCheckInDateChange = (newDate) => {\n//         setCheckInDate(newDate);\n//     };\n\n//     const handleCheckOutDateChange = (newDate) => {\n//         setCheckOutDate(newDate);\n//     };\n\n//     const calculateTotalPrice = () => {\n//         if (checkInDate && checkOutDate) {\n//             const checkIn = checkInDate.toDate();\n//             const checkOut = checkOutDate.toDate();\n//             const timeDifference = checkOut - checkIn;\n//             const daysBooked = timeDifference / (1000 * 3600 * 24);\n//             return daysBooked * 500;\n//         }\n//         return 0;\n//     };\n\n//     const handleSubmit = async () => {\n//         if (!roomType || !checkInDate || !checkOutDate || !guests) {\n//             setError(true);\n//             alert(\"Please complete all fields\");\n//             return;\n//         }\n\n//         if (checkOutDate.isBefore(checkInDate)) {\n//             setError(true);\n//             alert(\"Check-out date cannot be before check-in date\");\n//             return;\n//         }\n\n//         const totalPrice = calculateTotalPrice();\n//         setTotalPrice(totalPrice);\n\n//         alert(`Total Price: ${totalPrice} EGP`);\n\n//         const userId = localStorage.getItem(\"userId\");\n//         const requestBody = {\n//             roomType,\n//             guests,\n//             checkInDate: checkInDate.toISOString(),\n//             checkOutDate: checkOutDate.toISOString(),\n//             userId,\n//             totalPrice,\n//         };\n\n//         try {\n//             console.log(requestBody);\n//             const response = await fetch(\"http://localhost:5000/api/booking/details\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify(requestBody),\n//             });\n\n//             const data = await response.json();\n//             if (response.ok) {\n//                 alert(\"Booking details submitted successfully!\");\n//                 localStorage.setItem(\"bookingId\", data.bookingId);\n//                 navigate('/Bookservices');\n//             } else {\n//                 alert(data.message || \"Failed to submit booking details\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error.message);\n//             alert(error.message || \"Failed to submit booking details\");\n//         }\n//     };\n\n//     const handleShowBookings = async () => {\n//         const userId = localStorage.getItem(\"userId\");\n\n//         if (!userId) {\n//             alert(\"User not logged in\");\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\n//             const data = await response.json();\n\n//             if (response.ok) {\n//                 setBookings(data.bookings);\n//                 setOpen(true);\n//             } else {\n//                 alert(data.message || \"Failed to fetch bookings\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error.message);\n//             alert(error.message || \"Failed to fetch bookings\");\n//         }\n//     };\n\n//     return (\n//         <Box sx={{ width: '100%' }}>\n//             <FormControl fullWidth error={error}>\n//                 <InputLabel>Room Type</InputLabel>\n//                 <Select value={roomType} label=\"Room Type\" onChange={handleRoomChange}>\n//                     <MenuItem value=\"Deluxe Room\">Deluxe Room</MenuItem>\n//                     <MenuItem value=\"King Room\">King Room</MenuItem>\n//                 </Select>\n//                 {error && <FormHelperText>Room type is required</FormHelperText>}\n//             </FormControl>\n\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <DatePicker\n//                     label=\"Check-in Date\"\n//                     value={checkInDate}\n//                     onChange={handleCheckInDateChange}\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//                 />\n//             </LocalizationProvider>\n\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\n//                 <DatePicker\n//                     label=\"Check-out Date\"\n//                     value={checkOutDate}\n//                     onChange={handleCheckOutDateChange}\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\n//                 />\n//             </LocalizationProvider>\n\n//             <FormControl sx={{ m: 1, minWidth: 400 }} error={error}>\n//                 <InputLabel id=\"guests-label\">Number of Guests</InputLabel>\n//                 <Select\n//                     labelId=\"guests-label\"\n//                     id=\"guests-select\"\n//                     value={guests}\n//                     label=\"Number of Guests\"\n//                     onChange={handleGuestsChange}\n//                 >\n//                     <MenuItem value=\"\">\n//                         <em>None</em>\n//                     </MenuItem>\n//                     <MenuItem value={1}>1 Guest</MenuItem>\n//                     <MenuItem value={2}>2 Guests</MenuItem>\n//                 </Select>\n//                 {error && <FormHelperText>Number of guests is required</FormHelperText>}\n//             </FormControl>\n\n//             <Button variant=\"contained\" fullWidth sx={{ marginTop: 3 }} onClick={handleSubmit}>\n//                 Submit\n//             </Button>\n\n//             <Button variant=\"outlined\" fullWidth sx={{ marginTop: 3 }} onClick={handleShowBookings}>\n//                 Show Bookings\n//             </Button>\n\n//             <Dialog open={open} onClose={() => setOpen(false)}>\n//                 <DialogTitle>Your Bookings</DialogTitle>\n//                 <DialogContent>\n//                     <List>\n//                         {bookings.map((booking, index) => (\n//                             <ListItem key={index}>\n//                                 <ListItemText\n//                                     primary={`Room Type: ${booking.roomType}`}\n//                                     secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate}, Total Price: ${booking.totalPrice}`}\n//                                 />\n//                             </ListItem>\n//                         ))}\n//                     </List>\n//                 </DialogContent>\n//                 <DialogActions>\n//                     <Button onClick={() => setOpen(false)} color=\"primary\">\n//                         Close\n//                     </Button>\n//                 </DialogActions>\n//             </Dialog>\n//         </Box>\n//     );\n// }\nclass BookingDetails {\n  constructor(roomType, checkInDate, checkOutDate, guests, userId) {\n    this.roomType = roomType;\n    this.checkInDate = new Date(checkInDate);\n    this.checkOutDate = new Date(checkOutDate);\n    this.guests = guests;\n    this.userId = userId;\n  }\n  isValid() {\n    if (!this.roomType || !this.checkInDate || !this.checkOutDate || !this.guests) {\n      return {\n        valid: false,\n        message: \"Please complete all fields\"\n      };\n    }\n    if (this.checkOutDate <= this.checkInDate) {\n      return {\n        valid: false,\n        message: \"Check-out date must be after check-in date\"\n      };\n    }\n    return {\n      valid: true\n    };\n  }\n  toRequestBody() {\n    return {\n      roomType: this.roomType,\n      checkInDate: this.checkInDate.toISOString(),\n      checkOutDate: this.checkOutDate.toISOString(),\n      guests: this.guests,\n      userId: this.userId\n    };\n  }\n}\nconst SelectLabelsSingle = () => {\n  _s();\n  const [roomType, setRoomType] = useState('');\n  const [checkInDate, setCheckInDate] = useState('');\n  const [checkOutDate, setCheckOutDate] = useState('');\n  const [guests, setGuests] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async () => {\n    const userId = localStorage.getItem(\"userId\");\n    const booking = new BookingDetails(roomType, checkInDate, checkOutDate, guests, userId);\n    const validation = booking.isValid();\n    if (!validation.valid) {\n      alert(validation.message);\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5000/api/booking/details\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(booking.toRequestBody())\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"Booking details submitted successfully!\");\n        navigate('/Bookservices');\n      } else {\n        alert(data.message || \"Failed to submit booking details\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error.message);\n      alert(\"Failed to submit booking details\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room Type\",\n        value: roomType,\n        onChange: e => setRoomType(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        placeholder: \"Check-In Date\",\n        value: checkInDate,\n        onChange: e => setCheckInDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        placeholder: \"Check-Out Date\",\n        value: checkOutDate,\n        onChange: e => setCheckOutDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Guests\",\n        value: guests,\n        onChange: e => setGuests(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectLabelsSingle, \"LsMOM6v+s3bxPlOmiHmoLYcy+1U=\", true);\n_c = SelectLabelsSingle;\nexport default SelectLabelsSingle;\nvar _c;\n$RefreshReg$(_c, \"SelectLabelsSingle\");","map":{"version":3,"names":["BookingDetails","constructor","roomType","checkInDate","checkOutDate","guests","userId","Date","isValid","valid","message","toRequestBody","toISOString","SelectLabelsSingle","_s","setRoomType","useState","setCheckInDate","setCheckOutDate","setGuests","navigate","useNavigate","handleSubmit","localStorage","getItem","booking","validation","alert","response","fetch","method","headers","body","JSON","stringify","data","json","ok","error","console","_jsxDEV","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/farid/hotel/my-app/Ejust-Hotel-Website/src/components/selectBox.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import {\r\n//     Box,\r\n//     Button,\r\n//     InputLabel,\r\n//     MenuItem,\r\n//     FormControl,\r\n//     Select,\r\n//     TextField,\r\n//     Dialog,\r\n//     DialogTitle,\r\n//     DialogContent,\r\n//     DialogActions,\r\n//     List,\r\n//     ListItem,\r\n//     ListItemText,\r\n//     FormHelperText,\r\n// } from '@mui/material';\r\n// import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n// import { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\n// import { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\n// import { WovenImageList } from './ImageList';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// export default function SelectLabelsSingle() {\r\n//     const [roomType, setRoomType] = useState(\"\");\r\n//     const [checkInDate, setCheckInDate] = useState(null);\r\n//     const [checkOutDate, setCheckOutDate] = useState(null);\r\n//     const [guests, setGuests] = useState(\"\");\r\n//     const [error, setError] = useState(false);\r\n//     const [open, setOpen] = useState(false);\r\n//     const [bookings, setBookings] = useState([]);\r\n//     const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleRoomChange = (event) => {\r\n//         setRoomType(event.target.value);\r\n//         setGuests('');\r\n//         setError(false);\r\n//     };\r\n\r\n//     const handleGuestsChange = (event) => {\r\n//         setGuests(event.target.value);\r\n//     };\r\n\r\n//     const handleCheckInDateChange = (newDate) => {\r\n//         setCheckInDate(newDate);\r\n//     };\r\n\r\n//     const handleCheckOutDateChange = (newDate) => {\r\n//         setCheckOutDate(newDate);\r\n//     };\r\n\r\n//     const calculateTotalPrice = () => {\r\n//         if (checkInDate && checkOutDate) {\r\n//             const checkIn = checkInDate.toDate();\r\n//             const checkOut = checkOutDate.toDate();\r\n//             const timeDifference = checkOut - checkIn;\r\n//             const daysBooked = timeDifference / (1000 * 3600 * 24);\r\n//             return daysBooked * 500;\r\n//         }\r\n//         return 0;\r\n//     };\r\n\r\n//     const handleSubmit = async () => {\r\n//         if (!roomType || !checkInDate || !checkOutDate || !guests) {\r\n//             setError(true);\r\n//             alert(\"Please complete all fields\");\r\n//             return;\r\n//         }\r\n\r\n//         if (checkOutDate.isBefore(checkInDate)) {\r\n//             setError(true);\r\n//             alert(\"Check-out date cannot be before check-in date\");\r\n//             return;\r\n//         }\r\n\r\n//         const totalPrice = calculateTotalPrice();\r\n//         setTotalPrice(totalPrice);\r\n\r\n//         alert(`Total Price: ${totalPrice} EGP`);\r\n\r\n//         const userId = localStorage.getItem(\"userId\");\r\n//         const requestBody = {\r\n//             roomType,\r\n//             guests,\r\n//             checkInDate: checkInDate.toISOString(),\r\n//             checkOutDate: checkOutDate.toISOString(),\r\n//             userId,\r\n//             totalPrice,\r\n//         };\r\n\r\n//         try {\r\n//             console.log(requestBody);\r\n//             const response = await fetch(\"http://localhost:5000/api/booking/details\", {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify(requestBody),\r\n//             });\r\n\r\n//             const data = await response.json();\r\n//             if (response.ok) {\r\n//                 alert(\"Booking details submitted successfully!\");\r\n//                 localStorage.setItem(\"bookingId\", data.bookingId);\r\n//                 navigate('/Bookservices');\r\n//             } else {\r\n//                 alert(data.message || \"Failed to submit booking details\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error.message);\r\n//             alert(error.message || \"Failed to submit booking details\");\r\n//         }\r\n//     };\r\n\r\n//     const handleShowBookings = async () => {\r\n//         const userId = localStorage.getItem(\"userId\");\r\n\r\n//         if (!userId) {\r\n//             alert(\"User not logged in\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\r\n//             const data = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 setBookings(data.bookings);\r\n//                 setOpen(true);\r\n//             } else {\r\n//                 alert(data.message || \"Failed to fetch bookings\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error:\", error.message);\r\n//             alert(error.message || \"Failed to fetch bookings\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Box sx={{ width: '100%' }}>\r\n//             <FormControl fullWidth error={error}>\r\n//                 <InputLabel>Room Type</InputLabel>\r\n//                 <Select value={roomType} label=\"Room Type\" onChange={handleRoomChange}>\r\n//                     <MenuItem value=\"Deluxe Room\">Deluxe Room</MenuItem>\r\n//                     <MenuItem value=\"King Room\">King Room</MenuItem>\r\n//                 </Select>\r\n//                 {error && <FormHelperText>Room type is required</FormHelperText>}\r\n//             </FormControl>\r\n\r\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//                 <DatePicker\r\n//                     label=\"Check-in Date\"\r\n//                     value={checkInDate}\r\n//                     onChange={handleCheckInDateChange}\r\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//                 />\r\n//             </LocalizationProvider>\r\n\r\n//             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//                 <DatePicker\r\n//                     label=\"Check-out Date\"\r\n//                     value={checkOutDate}\r\n//                     onChange={handleCheckOutDateChange}\r\n//                     renderInput={(props) => <TextField {...props} fullWidth sx={{ marginTop: 2 }} />}\r\n//                 />\r\n//             </LocalizationProvider>\r\n\r\n//             <FormControl sx={{ m: 1, minWidth: 400 }} error={error}>\r\n//                 <InputLabel id=\"guests-label\">Number of Guests</InputLabel>\r\n//                 <Select\r\n//                     labelId=\"guests-label\"\r\n//                     id=\"guests-select\"\r\n//                     value={guests}\r\n//                     label=\"Number of Guests\"\r\n//                     onChange={handleGuestsChange}\r\n//                 >\r\n//                     <MenuItem value=\"\">\r\n//                         <em>None</em>\r\n//                     </MenuItem>\r\n//                     <MenuItem value={1}>1 Guest</MenuItem>\r\n//                     <MenuItem value={2}>2 Guests</MenuItem>\r\n//                 </Select>\r\n//                 {error && <FormHelperText>Number of guests is required</FormHelperText>}\r\n//             </FormControl>\r\n\r\n//             <Button variant=\"contained\" fullWidth sx={{ marginTop: 3 }} onClick={handleSubmit}>\r\n//                 Submit\r\n//             </Button>\r\n\r\n//             <Button variant=\"outlined\" fullWidth sx={{ marginTop: 3 }} onClick={handleShowBookings}>\r\n//                 Show Bookings\r\n//             </Button>\r\n\r\n//             <Dialog open={open} onClose={() => setOpen(false)}>\r\n//                 <DialogTitle>Your Bookings</DialogTitle>\r\n//                 <DialogContent>\r\n//                     <List>\r\n//                         {bookings.map((booking, index) => (\r\n//                             <ListItem key={index}>\r\n//                                 <ListItemText\r\n//                                     primary={`Room Type: ${booking.roomType}`}\r\n//                                     secondary={`Check-in: ${booking.checkInDate}, Check-out: ${booking.checkOutDate}, Total Price: ${booking.totalPrice}`}\r\n//                                 />\r\n//                             </ListItem>\r\n//                         ))}\r\n//                     </List>\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={() => setOpen(false)} color=\"primary\">\r\n//                         Close\r\n//                     </Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//         </Box>\r\n//     );\r\n// }\r\nclass BookingDetails {\r\n    constructor(roomType, checkInDate, checkOutDate, guests, userId) {\r\n        this.roomType = roomType;\r\n        this.checkInDate = new Date(checkInDate);\r\n        this.checkOutDate = new Date(checkOutDate);\r\n        this.guests = guests;\r\n        this.userId = userId;\r\n    }\r\n\r\n    isValid() {\r\n        if (!this.roomType || !this.checkInDate || !this.checkOutDate || !this.guests) {\r\n            return { valid: false, message: \"Please complete all fields\" };\r\n        }\r\n        if (this.checkOutDate <= this.checkInDate) {\r\n            return { valid: false, message: \"Check-out date must be after check-in date\" };\r\n        }\r\n        return { valid: true };\r\n    }\r\n\r\n    toRequestBody() {\r\n        return {\r\n            roomType: this.roomType,\r\n            checkInDate: this.checkInDate.toISOString(),\r\n            checkOutDate: this.checkOutDate.toISOString(),\r\n            guests: this.guests,\r\n            userId: this.userId,\r\n        };\r\n    }\r\n}\r\n\r\nconst SelectLabelsSingle = () => {\r\n    const [roomType, setRoomType] = useState('');\r\n    const [checkInDate, setCheckInDate] = useState('');\r\n    const [checkOutDate, setCheckOutDate] = useState('');\r\n    const [guests, setGuests] = useState('');\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async () => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        const booking = new BookingDetails(roomType, checkInDate, checkOutDate, guests, userId);\r\n\r\n        const validation = booking.isValid();\r\n        if (!validation.valid) {\r\n            alert(validation.message);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/booking/details\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(booking.toRequestBody()),\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                alert(\"Booking details submitted successfully!\");\r\n                navigate('/Bookservices');\r\n            } else {\r\n                alert(data.message || \"Failed to submit booking details\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error:\", error.message);\r\n            alert(\"Failed to submit booking details\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Room Type\"\r\n                    value={roomType}\r\n                    onChange={(e) => setRoomType(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"date\"\r\n                    placeholder=\"Check-In Date\"\r\n                    value={checkInDate}\r\n                    onChange={(e) => setCheckInDate(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"date\"\r\n                    placeholder=\"Check-Out Date\"\r\n                    value={checkOutDate}\r\n                    onChange={(e) => setCheckOutDate(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"Guests\"\r\n                    value={guests}\r\n                    onChange={(e) => setGuests(e.target.value)}\r\n                />\r\n                <button type=\"button\" onClick={handleSubmit}>\r\n                    Submit\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectLabelsSingle;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,CAAC;EACjBC,WAAWA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,EAAEC,MAAM,EAAEC,MAAM,EAAE;IAC7D,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAG,IAAII,IAAI,CAACJ,WAAW,CAAC;IACxC,IAAI,CAACC,YAAY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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}