{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\farid\\\\hotel\\\\my-app\\\\Ejust-Hotel-Website\\\\src\\\\confirmation.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { Box, Typography, Button, Grid, Paper, List, ListItem, ListItemText, CircularProgress } from \"@mui/material\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const [bookingDetails, setBookingDetails] = useState(null);\n//   const [services, setServices] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchBookingDetails = async () => {\n//       const userId = localStorage.getItem(\"userId\");\n//       const bookingId = localStorage.getItem(\"bookingId\");\n\n//       if (!userId || !bookingId) {\n//         alert(\"User or booking ID not found\");\n//         return;\n//       }\n\n//       try {\n//         // Fetch booking details for the user\n//         const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\n//         const data = await response.json();\n\n//         if (response.ok) {\n//           const latestBooking = data.bookings[data.bookings.length - 1]; // Get the latest booking\n//           setBookingDetails(latestBooking);\n\n//           // Fetch services for this booking using bookingId\n//           const servicesResponse = await fetch(\n//             `http://localhost:5000/api/services/${bookingId}`\n//           );\n\n//           const servicesData = await servicesResponse.json();\n//           console.log(\"Services Response:\", servicesData);\n\n//           if (servicesResponse.ok) {\n//             setServices(servicesData.services || []); // Ensure services is an array\n//           } else {\n//             setError(\"Failed to fetch services\");\n//           }\n//         } else {\n//           setError(\"Failed to fetch booking details\");\n//         }\n//       } catch (err) {\n//         setError(\"Error fetching data\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchBookingDetails();\n//   }, []);\n\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", minHeight: \"100vh\" }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <Box sx={{ textAlign: \"center\", marginTop: 3 }}>\n//         <Typography variant=\"h6\" color=\"error\">\n//           {error}\n//         </Typography>\n//       </Box>\n//     );\n//   }\n\n//   if (!bookingDetails) {\n//     return (\n//       <Box sx={{ textAlign: \"center\", marginTop: 3 }}>\n//         <Typography variant=\"h6\">No booking found.</Typography>\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Box\n//       sx={{\n//         minHeight: \"100vh\",\n//         backgroundImage: \"url('./background2.jpg')\", // Background image\n//         backgroundSize: \"cover\",\n//         backgroundPosition: \"center\",\n//         backgroundRepeat: \"no-repeat\",\n//         padding: 4,\n//       }}\n//     >\n//       <Grid container spacing={2} justifyContent=\"center\">\n//         <Grid item xs={12} sm={8} md={6}>\n//           <Paper sx={{ padding: 3, backgroundColor: \"rgba(255, 255, 255, 0.8)\" }}>\n//             <Typography variant=\"h4\" align=\"center\" sx={{ marginBottom: 2 }}>\n//               Booking Confirmation\n//             </Typography>\n\n//             <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n//               Booking Details\n//             </Typography>\n//             <List>\n//               <ListItem>\n//                 <ListItemText primary=\"Room Type\" secondary={bookingDetails.roomType} />\n//               </ListItem>\n//               <ListItem>\n//                 <ListItemText\n//                   primary=\"Check-in Date\"\n//                   secondary={new Date(bookingDetails.checkInDate).toLocaleDateString()}\n//                 />\n//               </ListItem>\n//               <ListItem>\n//                 <ListItemText\n//                   primary=\"Check-out Date\"\n//                   secondary={new Date(bookingDetails.checkOutDate).toLocaleDateString()}\n//                 />\n//               </ListItem>\n//               <ListItem>\n//                 <ListItemText primary=\"Number of Guests\" secondary={bookingDetails.guests} />\n//               </ListItem>\n//               <ListItem>\n//                 <ListItemText\n//                     primary=\"Room Price\"\n//                     secondary={`${bookingDetails.totalPrice} EGP`} // Assuming roomPrice is the field holding the price\n//                  />\n//                 </ListItem>\n//             </List>\n\n//             <Typography variant=\"h6\" color=\"primary\" gutterBottom sx={{ marginTop: 3 }}>\n//   Services Booked\n// </Typography>\n// <List>\n//   {services.length ? (\n//     services.map((service, index) => (\n//       <ListItem key={index}>\n//         {/* Food Section */}\n//         <div>\n//           <Typography variant=\"h6\">Food</Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Bundle:</strong> {service.food.bundle || \"No Food Bundle\"}\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Meal Type:</strong> {service.food.mealType || \"N/A\"}\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Price:</strong> {service.food.price || \"N/A\"}\n//           </Typography>\n//         </div>\n\n//         {/* Court Section */}\n//         <div style={{ marginTop: 10 }}>\n//           <Typography variant=\"h6\">Court</Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Type:</strong> {service.court.type || \"No Court Type\"}\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Time:</strong> {service.court.time || \"No Court Time\"}\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Date:</strong> {service.court.date ? new Date(service.court.date).toLocaleDateString() : \"No Court Date\"}\n//           </Typography>\n//         </div>\n\n//         {/* Gym Section */}\n//         <div style={{ marginTop: 10 }}>\n//           <Typography variant=\"h6\">Gym</Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Time:</strong> {service.gym.time || \"No Gym Time\"}\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <strong>Date:</strong> {service.gym.date ? new Date(service.gym.date).toLocaleDateString() : \"No Gym Date\"}\n//           </Typography>\n//         </div>\n//       </ListItem>\n//     ))\n//   ) : (\n//     <ListItem>\n//       <ListItemText primary=\"No services booked\" />\n//     </ListItem>\n//   )}\n// </List>\n\n//             <Box sx={{ display: \"flex\", justifyContent: \"center\", marginTop: 4 }}>\n//               <Button variant=\"contained\" color=\"primary\" onClick={() => navigate(\"/room-Type\")}>\n//                 Book Another Room\n//               </Button>\n//             </Box>\n//           </Paper>\n//         </Grid>\n//       </Grid>\n//     </Box>\n//   );\n// };\n\n// export default ConfirmationPage;\nimport React, { useState } from \"react\";\nimport { Box, Typography, Button, Grid, Paper, CircularProgress } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfirmationPage = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSendEmail = async () => {\n    setLoading(true);\n    setSuccess(false);\n    setError(null);\n\n    // Mock booking details\n    const email = \"user@example.com\"; // Replace with recipient's email\n    const subject = \"Booking Confirmation\";\n    const message = `\n      <h1>Your Booking Details</h1>\n      <p>Thank you for booking with us!</p>\n      <ul>\n        <li>Room Type: Deluxe</li>\n        <li>Check-in Date: 2024-01-01</li>\n        <li>Check-out Date: 2024-01-05</li>\n        <li>Total Price: $500</li>\n      </ul>\n    `;\n    try {\n      const response = await fetch(\"http://localhost:5000/api/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          subject,\n          message\n        })\n      });\n      if (response.ok) {\n        setSuccess(true);\n      } else {\n        throw new Error(\"Failed to send email\");\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 8,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            padding: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            align: \"center\",\n            sx: {\n              marginBottom: 2\n            },\n            children: \"Booking Confirmation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            onClick: handleSendEmail,\n            disabled: loading,\n            children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 26\n            }, this) : \"Send Confirmation Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), success && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"success\",\n            sx: {\n              marginTop: 2,\n              textAlign: \"center\"\n            },\n            children: \"Email sent successfully!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"error\",\n            sx: {\n              marginTop: 2,\n              textAlign: \"center\"\n            },\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfirmationPage, \"e9GOWu+9LnDSSDfnND0GUJxcd74=\");\n_c = ConfirmationPage;\nexport default ConfirmationPage;\nvar _c;\n$RefreshReg$(_c, \"ConfirmationPage\");","map":{"version":3,"names":["React","useState","Box","Typography","Button","Grid","Paper","CircularProgress","jsxDEV","_jsxDEV","ConfirmationPage","_s","loading","setLoading","success","setSuccess","error","setError","handleSendEmail","email","subject","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","err","sx","padding","children","container","justifyContent","item","xs","sm","md","variant","align","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","fullWidth","onClick","disabled","size","marginTop","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/farid/hotel/my-app/Ejust-Hotel-Website/src/confirmation.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { Box, Typography, Button, Grid, Paper, List, ListItem, ListItemText, CircularProgress } from \"@mui/material\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const ConfirmationPage = () => {\r\n//   const [bookingDetails, setBookingDetails] = useState(null);\r\n//   const [services, setServices] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     const fetchBookingDetails = async () => {\r\n//       const userId = localStorage.getItem(\"userId\");\r\n//       const bookingId = localStorage.getItem(\"bookingId\");\r\n\r\n//       if (!userId || !bookingId) {\r\n//         alert(\"User or booking ID not found\");\r\n//         return;\r\n//       }\r\n\r\n//       try {\r\n//         // Fetch booking details for the user\r\n//         const response = await fetch(`http://localhost:5000/api/booking/${userId}`);\r\n//         const data = await response.json();\r\n\r\n//         if (response.ok) {\r\n//           const latestBooking = data.bookings[data.bookings.length - 1]; // Get the latest booking\r\n//           setBookingDetails(latestBooking);\r\n\r\n//           // Fetch services for this booking using bookingId\r\n//           const servicesResponse = await fetch(\r\n//             `http://localhost:5000/api/services/${bookingId}`\r\n//           );\r\n          \r\n//           const servicesData = await servicesResponse.json();\r\n//           console.log(\"Services Response:\", servicesData);\r\n\r\n//           if (servicesResponse.ok) {\r\n//             setServices(servicesData.services || []); // Ensure services is an array\r\n//           } else {\r\n//             setError(\"Failed to fetch services\");\r\n//           }\r\n//         } else {\r\n//           setError(\"Failed to fetch booking details\");\r\n//         }\r\n//       } catch (err) {\r\n//         setError(\"Error fetching data\");\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchBookingDetails();\r\n//   }, []);\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", minHeight: \"100vh\" }}>\r\n//         <CircularProgress />\r\n//       </Box>\r\n//     );\r\n//   }\r\n\r\n//   if (error) {\r\n//     return (\r\n//       <Box sx={{ textAlign: \"center\", marginTop: 3 }}>\r\n//         <Typography variant=\"h6\" color=\"error\">\r\n//           {error}\r\n//         </Typography>\r\n//       </Box>\r\n//     );\r\n//   }\r\n\r\n//   if (!bookingDetails) {\r\n//     return (\r\n//       <Box sx={{ textAlign: \"center\", marginTop: 3 }}>\r\n//         <Typography variant=\"h6\">No booking found.</Typography>\r\n//       </Box>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <Box\r\n//       sx={{\r\n//         minHeight: \"100vh\",\r\n//         backgroundImage: \"url('./background2.jpg')\", // Background image\r\n//         backgroundSize: \"cover\",\r\n//         backgroundPosition: \"center\",\r\n//         backgroundRepeat: \"no-repeat\",\r\n//         padding: 4,\r\n//       }}\r\n//     >\r\n//       <Grid container spacing={2} justifyContent=\"center\">\r\n//         <Grid item xs={12} sm={8} md={6}>\r\n//           <Paper sx={{ padding: 3, backgroundColor: \"rgba(255, 255, 255, 0.8)\" }}>\r\n//             <Typography variant=\"h4\" align=\"center\" sx={{ marginBottom: 2 }}>\r\n//               Booking Confirmation\r\n//             </Typography>\r\n\r\n//             <Typography variant=\"h6\" color=\"primary\" gutterBottom>\r\n//               Booking Details\r\n//             </Typography>\r\n//             <List>\r\n//               <ListItem>\r\n//                 <ListItemText primary=\"Room Type\" secondary={bookingDetails.roomType} />\r\n//               </ListItem>\r\n//               <ListItem>\r\n//                 <ListItemText\r\n//                   primary=\"Check-in Date\"\r\n//                   secondary={new Date(bookingDetails.checkInDate).toLocaleDateString()}\r\n//                 />\r\n//               </ListItem>\r\n//               <ListItem>\r\n//                 <ListItemText\r\n//                   primary=\"Check-out Date\"\r\n//                   secondary={new Date(bookingDetails.checkOutDate).toLocaleDateString()}\r\n//                 />\r\n//               </ListItem>\r\n//               <ListItem>\r\n//                 <ListItemText primary=\"Number of Guests\" secondary={bookingDetails.guests} />\r\n//               </ListItem>\r\n//               <ListItem>\r\n//                 <ListItemText\r\n//                     primary=\"Room Price\"\r\n//                     secondary={`${bookingDetails.totalPrice} EGP`} // Assuming roomPrice is the field holding the price\r\n//                  />\r\n//                 </ListItem>\r\n//             </List>\r\n\r\n//             <Typography variant=\"h6\" color=\"primary\" gutterBottom sx={{ marginTop: 3 }}>\r\n//   Services Booked\r\n// </Typography>\r\n// <List>\r\n//   {services.length ? (\r\n//     services.map((service, index) => (\r\n//       <ListItem key={index}>\r\n//         {/* Food Section */}\r\n//         <div>\r\n//           <Typography variant=\"h6\">Food</Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Bundle:</strong> {service.food.bundle || \"No Food Bundle\"}\r\n//           </Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Meal Type:</strong> {service.food.mealType || \"N/A\"}\r\n//           </Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Price:</strong> {service.food.price || \"N/A\"}\r\n//           </Typography>\r\n//         </div>\r\n\r\n//         {/* Court Section */}\r\n//         <div style={{ marginTop: 10 }}>\r\n//           <Typography variant=\"h6\">Court</Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Type:</strong> {service.court.type || \"No Court Type\"}\r\n//           </Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Time:</strong> {service.court.time || \"No Court Time\"}\r\n//           </Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Date:</strong> {service.court.date ? new Date(service.court.date).toLocaleDateString() : \"No Court Date\"}\r\n//           </Typography>\r\n//         </div>\r\n\r\n//         {/* Gym Section */}\r\n//         <div style={{ marginTop: 10 }}>\r\n//           <Typography variant=\"h6\">Gym</Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Time:</strong> {service.gym.time || \"No Gym Time\"}\r\n//           </Typography>\r\n//           <Typography variant=\"body1\">\r\n//             <strong>Date:</strong> {service.gym.date ? new Date(service.gym.date).toLocaleDateString() : \"No Gym Date\"}\r\n//           </Typography>\r\n//         </div>\r\n//       </ListItem>\r\n//     ))\r\n//   ) : (\r\n//     <ListItem>\r\n//       <ListItemText primary=\"No services booked\" />\r\n//     </ListItem>\r\n//   )}\r\n// </List>\r\n\r\n\r\n//             <Box sx={{ display: \"flex\", justifyContent: \"center\", marginTop: 4 }}>\r\n//               <Button variant=\"contained\" color=\"primary\" onClick={() => navigate(\"/room-Type\")}>\r\n//                 Book Another Room\r\n//               </Button>\r\n//             </Box>\r\n//           </Paper>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default ConfirmationPage;\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Paper,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\n\r\nconst ConfirmationPage = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSendEmail = async () => {\r\n    setLoading(true);\r\n    setSuccess(false);\r\n    setError(null);\r\n\r\n    // Mock booking details\r\n    const email = \"user@example.com\"; // Replace with recipient's email\r\n    const subject = \"Booking Confirmation\";\r\n    const message = `\r\n      <h1>Your Booking Details</h1>\r\n      <p>Thank you for booking with us!</p>\r\n      <ul>\r\n        <li>Room Type: Deluxe</li>\r\n        <li>Check-in Date: 2024-01-01</li>\r\n        <li>Check-out Date: 2024-01-05</li>\r\n        <li>Total Price: $500</li>\r\n      </ul>\r\n    `;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/send-email\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, subject, message }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setSuccess(true);\r\n      } else {\r\n        throw new Error(\"Failed to send email\");\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ padding: 4 }}>\r\n      <Grid container justifyContent=\"center\">\r\n        <Grid item xs={12} sm={8} md={6}>\r\n          <Paper sx={{ padding: 3 }}>\r\n            <Typography variant=\"h4\" align=\"center\" sx={{ marginBottom: 2 }}>\r\n              Booking Confirmation\r\n            </Typography>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              fullWidth\r\n              onClick={handleSendEmail}\r\n              disabled={loading}\r\n            >\r\n              {loading ? <CircularProgress size={24} /> : \"Send Confirmation Email\"}\r\n            </Button>\r\n\r\n            {success && (\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"success\"\r\n                sx={{ marginTop: 2, textAlign: \"center\" }}\r\n              >\r\n                Email sent successfully!\r\n              </Typography>\r\n            )}\r\n            {error && (\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"error\"\r\n                sx={{ marginTop: 2, textAlign: \"center\" }}\r\n              >\r\n                Error: {error}\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ConfirmationPage;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,GAAG,EACHC,UAAU,EACVC,MAAM,EACNC,IAAI,EACJC,KAAK,EACLC,gBAAgB,QACX,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,OAAO,EAAEC,UAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}